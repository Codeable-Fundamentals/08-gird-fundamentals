body {
  font-family: system-ui;
  background-color: #f0f0f0;
  margin: 0;
  padding: 20px;
}

.container {
  /* Diferentes formas de definir grid-template-columns */
  
  /* 1. Usando valores fijos */
  /* grid-template-columns: 200px 200px 200px; */
  
  /* 2. Usando fracciones (fr) - distribuyen el espacio disponible */
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  
  /* 3. Unidades mixtas */
  /* grid-template-columns: 200px 1fr 2fr; */
  
  /* 4. Usando porcentajes */
  /* grid-template-columns: 25% 50% 25%; */
  
  /* 5. Con la función repeat para patrones repetitivos */
  /* grid-template-columns: repeat(3, 1fr); */
  /* grid-template-columns: repeat(2, 1fr 2fr); */ /* Repite el patrón 1fr 2fr dos veces */
  
  /* 6. Con minmax() para tamaños responsivos */
  /* grid-template-columns: minmax(100px, 1fr) minmax(200px, 2fr) minmax(100px, 1fr); */
  
  /* 7. Con auto-fill y auto-fit (responsive) */
  /* grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); */ /* Crea tantas columnas como quepan */
  /* grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); */ /* Similar a auto-fill pero colapsa columnas vacías */
  
  /* 8. Usando 'auto' para ajustarse al contenido */
  /* grid-template-columns: auto 1fr auto; */
  
  /* 9. Mezcla de técnicas para layouts complejos */
  /* grid-template-columns: minmax(100px, 20%) 1fr minmax(100px, 15%); */

  /* 10. Usando nombres de líneas personalizados (line names) */
   /* grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [six] 100px [end];  */
  width: 80%;
  background-color: rgb(90, 71, 47);
}

.box {
  border: 1px solid red;
  background-color: rgb(240, 202, 154);
}
